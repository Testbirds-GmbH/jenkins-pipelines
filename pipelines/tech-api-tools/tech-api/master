@Library('tech-pipeline@master') _
import de.testbirds.PipelineConfig

properties([
	gitLabConnection('Testbirds Gitlab'),
	pipelineTriggers([])
	])

techpipeline.pipe('master') {
	def techConfig = new PipelineConfig([script:this,
		pom:'tech-parent/pom.xml',
		url: 'git@git.testbirds.com:tech/tech-api.git',
		mvnModules: 'tech-parent,tech-api,testcase-api,olddeps-compliance',
		jacocoExclusions: '**/de/testbirds/tech/api/data/**/*.class,**/de/testbirds/tech/api/event/decorator/**/*.class,**/de/testbirds/tech/api/event/info/**/*.class,**/de/testbirds/tech/api/event/jwt/**/*.class,**/de/testbirds/tech/api/event/service/**/*.class,**/de/testbirds/tech/api/event/startup/**/*.class,**/de/testbirds/tech/api/event/system/**/*.class,**/de/testbirds/tech/api/event/vm/**/*.class,**/de/testbirds/tech/api/event/vpn/**/*.class,**/de/testbirds/tech/api/rest/dto/**/*.class,**/de/testbirds/tech/testcase/**/*.class',
		sonarqube: 'sonarqube',
		])
	techConfig.configure()

	techCheckoutStage {
		configuration = techConfig
	}

	techBuildStage {
		configuration = techConfig
	}

	def techConfigOlddeps = new PipelineConfig([script:this,
		pom: 'olddeps-compliance/pom.xml',
		mvnGoalsBuild: '--batch-mode --fail-at-end verify site',
		deployArtifacts: false])
	techConfigOlddeps.configure()

	techBuildStage {
		stageName = 'old dependencies test'
		configuration = techConfigOlddeps
	}

	// do the analyze in the end, collecting ALL results, also from separate ITs
	techAnalyzeStage {
		configuration = techConfig
	}
}
